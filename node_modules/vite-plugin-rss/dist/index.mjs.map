{"version":3,"sources":["../src/plugin.ts","../src/type-guards.ts"],"sourcesContent":["import { ModuleInfo } from \"rollup\";\nimport stream from \"stream\";\nimport { Plugin } from \"vite\";\nimport convert, { ElementCompact } from \"xml-js\";\n\nimport {\n  isImage,\n  isJsXmlElement,\n  isSkipDays,\n  isSkipHours,\n  isTextInput,\n} from \"./type-guards\";\nimport { Channel, Item, OptionsDefine, OptionsMeta } from \"./types\";\n\nexport function rssPlugin(opts: OptionsMeta | OptionsDefine): Plugin[] {\n  return [devPlugin(opts), buildPlugin(opts)];\n}\n\n/**\n * dev mode plugin to serve the xml file\n * @param opts - plugin config options\n */\nfunction devPlugin(opts: OptionsMeta | OptionsDefine): Plugin {\n  let items = getItems(opts);\n  const fileName = getFileName(opts);\n\n  return {\n    name: \"rss-plugin-dev\",\n    enforce: \"post\",\n    apply: \"serve\",\n    configureServer(server) {\n      // serve feed.xml on dev server\n      server.middlewares.use((req, res, next) => {\n        if (\n          typeof req.url === \"string\" &&\n          new RegExp(`${fileName}$`).test(req.url)\n        ) {\n          if (opts.mode === \"meta\") {\n            const devServerModuleIds = Array.from(\n              server.moduleGraph.idToModuleMap.keys()\n            );\n            const moduleInfo = devServerModuleIds.map((id) =>\n              server.pluginContainer.getModuleInfo(id)\n            );\n\n            items = moduleInfo\n              .filter((module): module is ModuleInfo => !!module?.meta.rssItem)\n              .map((module) => module.meta.rssItem);\n          }\n\n          const renderedXML = createRssFeed(\n            opts.channel,\n            items ?? [],\n            fileName\n          );\n\n          const fileContent = Buffer.from(renderedXML, \"utf8\");\n          const readStream = new stream.PassThrough();\n          readStream.end(fileContent);\n          res.writeHead(200, {\n            \"Content-Type\": \"text/xml\",\n          });\n          readStream.pipe(res);\n          return;\n        }\n        next();\n      });\n    },\n  };\n}\n\n/**\n * build mode plugin for production builds\n * @param opts - plugin options\n */\nfunction buildPlugin(opts: OptionsMeta | OptionsDefine): Plugin {\n  let items = getItems(opts);\n  const fileName = getFileName(opts);\n\n  return {\n    name: \"rss-plugin-build\",\n    enforce: \"post\",\n    apply: \"build\",\n    buildEnd() {\n      if (opts.mode === \"meta\") {\n        const moduleIds = Array.from(this.getModuleIds());\n        const moduleInfo = moduleIds.map((id) => this.getModuleInfo(id));\n        items = moduleInfo\n          .filter((module): module is ModuleInfo => !!module?.meta.rssItem)\n          .map((module) => module.meta.rssItem);\n      }\n      // maybe do another pass for validation w/ zod\n\n      const renderedXML = createRssFeed(opts.channel, items, fileName);\n\n      this.emitFile({\n        fileName: fileName,\n        name: fileName,\n        source: renderedXML,\n        type: \"asset\",\n      });\n    },\n  };\n}\n\nfunction getFileName(opts: OptionsMeta | OptionsDefine): string {\n  return opts.fileName ?? \"feed.xml\";\n}\n\nfunction getItems(opts: OptionsMeta | OptionsDefine): Item[] {\n  if (opts.mode === \"define\") return opts.items;\n  return [];\n}\n\nfunction createRssFeed(channel: Channel, items: Item[], fileName: string) {\n  // sort by pubDate if available\n  const dateSortedRssItems = items.sort((a, b) => {\n    if (a.pubDate && b.pubDate) {\n      return b.pubDate.getTime() - a.pubDate.getTime();\n    }\n    if (a.pubDate) {\n      return 1;\n    }\n    if (b.pubDate) {\n      return -1;\n    }\n    return 0;\n  });\n\n  // transform rssItems into xml\n  // transofmr channel description into xml\n  const jsXml = {\n    _declaration: { _attributes: { version: \"1.0\", encoding: \"utf-8\" } },\n    rss: {\n      _attributes: {\n        version: \"2.0\",\n        \"xmlns:atom\": \"http://www.w3.org/2005/Atom\",\n      },\n      channel: {\n        ...channelToXmlJs(channel, fileName),\n        item: dateSortedRssItems.map((r) => itemToXmlJs(r)).slice(0, 100),\n      },\n    },\n  };\n\n  // turn collected items into xml\n  return convert.js2xml(jsXml, { compact: true, spaces: 2 });\n}\n\nfunction channelToXmlJs(channel: Channel, fileName: string) {\n  const jsXml: { [tagName: string]: ElementCompact } = {};\n  Object.keys(channel).forEach((tagName) => {\n    const value = channel[tagName as keyof Channel];\n    if (typeof value === \"string\" || typeof value === \"number\") {\n      jsXml[tagName] = {\n        _text: value,\n      };\n    } else if (value instanceof Date) {\n      jsXml[tagName] = {\n        _text: value.toUTCString(),\n      };\n    } else if (isJsXmlElement(value)) {\n      jsXml[tagName] = value;\n    } else if (isImage(value) || isTextInput(value)) {\n      jsXml[tagName] = {\n        ...value,\n      };\n    } else if (isSkipDays(value)) {\n      jsXml[tagName] = {\n        day: value.day.map((d) => ({ _text: d })),\n      };\n    } else if (isSkipHours(value)) {\n      jsXml[tagName] = {\n        hour: value.hour.map((d) => ({ _text: d })),\n      };\n    } else if (tagName === \"docs\" && value) {\n      jsXml[tagName] = {\n        _text: \"https://www.rssboard.org/rss-specification\",\n      };\n    } else if (tagName === \"generator\" && value) {\n      jsXml[tagName] = {\n        _text: \"vite-plugin-rss\",\n      };\n    }\n  });\n\n  const url = new URL(channel.link);\n  jsXml[\"atom:link\"] = {\n    _attributes: {\n      href: `${url.origin}/${fileName}`,\n      rel: \"self\",\n      type: \"application/rss+xml\",\n    },\n  };\n  return jsXml;\n}\n\nfunction itemToXmlJs(item: Item) {\n  const jsXml: { [tagName: string]: ElementCompact } = {};\n\n  Object.keys(item).forEach((tagName) => {\n    const value = item[tagName as keyof Item];\n    if (typeof value === \"string\" || typeof value === \"number\") {\n      jsXml[tagName] = {\n        _text: value,\n      };\n    } else if (value instanceof Date) {\n      jsXml[tagName] = {\n        _text: value.toUTCString(),\n      };\n    } else if (isJsXmlElement(value)) {\n      jsXml[tagName] = value;\n    }\n  });\n  return jsXml;\n}\n","import { Image, JsXmlElement, SkipDays, SkipHours, TextInput } from \"./types\";\n\nexport function isJsXmlElement(value: unknown): value is JsXmlElement {\n  return (\n    typeof value === \"object\" &&\n    value !== null &&\n    \"_attribute\" in value &&\n    \"_text\" in value\n  );\n}\n\nexport function isImage(value: unknown): value is Image {\n  return (\n    typeof value === \"object\" &&\n    value !== null &&\n    \"url\" in value &&\n    \"title\" in value &&\n    \"link\" in value\n  );\n}\n\nexport function isTextInput(value: unknown): value is TextInput {\n  return (\n    typeof value === \"object\" &&\n    value !== null &&\n    \"title\" in value &&\n    \"description\" in value &&\n    \"name\" in value &&\n    \"name\" in value &&\n    \"link\" in value\n  );\n}\n\nexport function isSkipHours(value: unknown): value is SkipHours {\n  return (\n    typeof value === \"object\" &&\n    value !== null &&\n    \"hour\" in value &&\n    Array.isArray((value as SkipHours)[\"hour\"])\n  );\n}\n\nexport function isSkipDays(value: unknown): value is SkipDays {\n  return (\n    typeof value === \"object\" &&\n    value !== null &&\n    \"day\" in value &&\n    Array.isArray((value as SkipDays)[\"day\"])\n  );\n}\n"],"mappings":"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","names":[]}